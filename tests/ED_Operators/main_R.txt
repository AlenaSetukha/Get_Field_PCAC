#include <iostream>
#include <fstream>
#include <cmath>
#include <cstdlib>
#include <fstream>
#include <complex>
#include <chrono>
#include <vector>


#include "Kernel_Par.h"
#include "R.h"
#include "Num_Par.h"
#include "element_geom.h"
#include "kernel_lib.h"


/**
 * Тест для проверки вычисления основных интегральных операторов задач
 * рассеяния: R = rot
 * Порядок обхода ячеек важен: либо по, либо против часовой
 * стрелки - все одновременно.
 */



int main(int argc, char **argv)
{
    //---------Тестирование операторов--------------
    const double rut1[4][3] = {{0., 0., 0.},
                         {2., 0., 0.},
                         {3., 2., 0.},
                         {0., 2., 0.}};

    const double rut2[3][3] = {{0., 0., 0.},
                         {2., 0., 0.},
                         {0., 2., 0.}};
    
    
    const double rut3[3][3] = {{3., 2., 0.},
                         {0., 2., 0.},
                         {2., 0., 0.}};


    const double x[3] = {3., 2.5, 0.};
    //const double x[3] = {1.25, 1., 0.};


    //-------------------Test1---------------------
    std::cout << "Test1. R в дальней зоне, сглаживание." << std::endl;

    const std::complex<double> j[3] = {1., 1., 1.,};
    const std::complex<double> k = std::complex<double>(1., 0.);

    Num_Par num_param(0.00001, 1.0, 1.0, 8, 10, 1, 1);


    std::complex<double> res[3];
    R_rot(j, x, rut1, num_param, k, res);
    std::cout << "Res1: " << res[0] << " " << res[1] << " " << res[2] << std::endl;


    std::complex<double> res1[3], res2[3];
    R_rot(j, x, rut2, num_param, k, res1);
    R_rot(j, x, rut3, num_param, k, res2);

    std::cout << "Res2: " << res1[0] + res2[0] << " " << res1[1] + res2[1] << " " << res1[2] + res2[2] << std::endl;





    //-------------------Test2---------------------
    std::cout << "Test2. R в точках коллокаций" << std::endl;
    R_rot_Colloc(j, x, rut1, num_param, k, res);
    std::cout << "Res1: " << res[0] << " " << res[1] << " " << res[2] << std::endl;

    R_rot_Colloc(j, x, rut2, num_param, k, res1);
    R_rot_Colloc(j, x, rut3, num_param, k, res2);

    std::cout << "Res2: " << res1[0] + res2[0] << " " << res1[1] + res2[1] << " " << res1[2] + res2[2] << std::endl;

    return 0;
}
